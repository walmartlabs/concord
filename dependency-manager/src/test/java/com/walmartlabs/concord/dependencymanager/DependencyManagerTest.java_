package com.walmartlabs.concord.dependencymanager;

/*-
 * *****
 * Concord
 * -----
 * Copyright (C) 2017 - 2018 Walmart Inc.
 * -----
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =====
 */

import com.github.tomakehurst.wiremock.core.Options;
import com.github.tomakehurst.wiremock.core.WireMockConfiguration;
import com.github.tomakehurst.wiremock.junit.WireMockRule;
import org.apache.http.HttpRequest;
import org.apache.http.HttpResponse;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.client.FutureRequestExecutionService;
import org.apache.http.impl.client.HttpRequestFutureTask;
import org.apache.http.params.HttpConnectionParams;
import org.eclipse.aether.ConfigurationProperties;
import org.eclipse.aether.util.ConfigUtils;
import org.junit.Ignore;
import org.junit.Rule;
import org.junit.Test;

import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.Duration;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static org.junit.Assert.assertEquals;

@Ignore
public class DependencyManagerTest {

    private static final MavenRepository MAVEN_TEST = MavenRepository.builder()
            .id("central")
            .contentType("default")
            .url("http://localhost:8089/maven2/")
//            .url("https://192.168.1.116/maven2/")
//            .url("http://10.255.255.1/maven2/")
//            .url("http://google.com:81")

//            .url("http://repo.maven.apache.org/maven2/")
            .snapshotPolicy(MavenRepositoryPolicy.builder()
                    .enabled(true)
                    .build())
            .build();

    @Rule
    public WireMockRule wireMockRule = new WireMockRule(8089);

    private static final String version = "1.0.7";

    @Test
    public void a() throws Exception {
        stubFor(get(anyUrl()).willReturn(
                aResponse()
                        .withStatus(200)
//                        .withBodyFile("repository/concord-cli-1.82.0.pom")));
                        .withFixedDelay((int)TimeUnit.MINUTES.toMillis(20))));

        Thread.sleep(TimeUnit.MINUTES.toMillis(15));
/*
        stubFor(get(urlMatching("./maven-metadata.xml")).willReturn(
                aResponse()
                        .withStatus(200)
                        .withFixedDelay((int)TimeUnit.MINUTES.toMillis(20))));


        DefaultHttpClient client = new DefaultHttpClient();
        HttpConnectionParams.setConnectionTimeout(client.getParams(), ConfigurationProperties.DEFAULT_CONNECT_TIMEOUT );
        HttpConnectionParams.setSoTimeout( client.getParams(), ConfigurationProperties.DEFAULT_REQUEST_TIMEOUT );

        ExecutorService execService = Executors.newCachedThreadPool();
        FutureRequestExecutionService requestExecutionService = new FutureRequestExecutionService(client, execService);

        HttpGet request = new HttpGet( "http://localhost:8089/1/2/maven-metadata.xml" );

        HttpRequestFutureTask<HttpResponse> futureTask = requestExecutionService.execute(request, HttpClientContext.create(), response -> response);

        System.out.println("EXEC");

        HttpResponse response = futureTask.get(30, TimeUnit.SECONDS);
        requestExecutionService.close();

        System.out.println("EXEC");
//        response = client.execute( request );

        System.out.println(">>>" + response);

//        Path tmpDir = Files.createTempDirectory("test");
//        URI uriA = new URI("mvn://com.walmartlabs.concord:concord-cli:" + version);
//
//        DependencyManager m = new DependencyManager(DependencyManagerConfiguration.of(tmpDir, Collections.singletonList(MAVEN_TEST)));
//        Collection<DependencyEntity> paths = m.resolve(Collections.singletonList(uriA));
//        System.out.println(">>>" + paths);
        */
    }

    @Test(timeout = 30000)
    public void test() throws Exception {
        Path tmpDir = Files.createTempDirectory("test");
        URI uriA = new URI("mvn://com.walmartlabs.concord:concord-policy-engine:1.44.0?scope=runtime");
        URI uriB = new URI("mvn://com.walmartlabs.concord:concord-policy-engine:1.43.0?scope=runtime");

        DependencyManager m = new DependencyManager(DependencyManagerConfiguration.of(tmpDir));
        Collection<DependencyEntity> paths = m.resolve(Arrays.asList(uriA, uriB));
        assertEquals(46, paths.size());
    }

    @Test(timeout = 30000)
    public void testProxy() throws Exception {
        Path tmpDir = Files.createTempDirectory("test");

        List<MavenRepository> repositories = Collections.singletonList(
                MavenRepository.builder()
                        .id("test")
                        .url("https://repo.maven.apache.org/maven2/")
                        .proxy(MavenProxy.builder()
                                .host("localhost")
                                .port(3128)
                                .build())
                        .build()
        );

        DependencyManager m = new DependencyManager(DependencyManagerConfiguration.of(tmpDir, repositories));
        m.resolveSingle(new URI("mvn://com.walmartlabs.concord:concord-sdk:1.54.0"));
    }
}
